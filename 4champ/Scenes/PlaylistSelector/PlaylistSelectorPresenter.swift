//
//  PlaylistSelectorPresenter.swift
//  4champ
//
//  Created by Aleksi Sitomaniemi on 13.3.2020.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlaylistSelectorPresentationLogic {
    func presentSelector(response: PlaylistSelector.PrepareSelection.Response)
    func presentAppend(response: PlaylistSelector.Append.Response)
}

class PlaylistSelectorPresenter: PlaylistSelectorPresentationLogic {
    weak var viewController: PlaylistSelectorDisplayLogic?

    func presentSelector(response: PlaylistSelector.PrepareSelection.Response) {
        var defaultString = ""
        var options: [String] = []
        var plIndex = 0
        for pl in response.playlistOptions {

            let modTick = pl.modules.contains(response.module.id ?? 0) ? "✓" : ""
            let modPlay: String
            if pl.id == moduleStorage.currentPlaylist?.plId {
                modPlay = "▶️"
                plIndex = response.playlistOptions.firstIndex { $0.id == pl.id } ?? 0
            } else {
                modPlay = ""
            }
            let plstring = "\(modTick)\(modPlay) \(pl.name!) (\(pl.modules.count))"

            if pl.id == "default" {
                defaultString = "\(modTick)\(modPlay) \("PlaylistView_DefaultPlaylist".l13n()) (\(pl.modules.count))"
                options.append(defaultString)
            } else {
                options.append(plstring)
            }
        }

        var moduleName = response.module.name
        if let cName = response.module.composer, cName.count > 0 {
            moduleName = String.init(format: "LockScreen_Playing".l13n(), moduleName, cName)
        }

        let status: DownloadStatus = response.module.hasBeenSaved() ? .complete : .unknown

        let viewModel = PlaylistSelector.PrepareSelection.ViewModel(module: moduleName,
                                                                    service: response.module.serviceId,
                                                                    currentPlaylistIndex: plIndex,
                                                                    playlistOptions: options,
                                                                    status: status)
        viewController?.displaySelector(viewModel: viewModel)
    }

    func presentAppend(response: PlaylistSelector.Append.Response) {
        let viewModel = PlaylistSelector.Append.ViewModel(status: response.status)
        viewController?.displayAppend(viewModel: viewModel)
    }
}
